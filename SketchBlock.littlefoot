/*
<metadata>
	<variables>
		<variable name="Channel" displayName="Midi Channel" type="int" min="1" max="12" value="1" displayMode="stepper" />
	</variables>
</metadata>
*/





// --------------------- HEAP LAYOUT ---------------------
//
// current scale notes = 0 - 84
//
// -------------------------------------------------------





#heapsize: 3500
const int SHORT_DELAY = 1000;
const int LONG_DELAY  = 2000;

const int PINK_COLOR       = 0xff0040;      const int DIM_PINK_COLOR   = 0x220008;
const int ORANGE_COLOR     = 0xff8000;      const int DIM_ORANGE_COLOR = 0x221000;
const int YELLOW_COLOR     = 0xffff00;      const int DIM_YELLOW_COLOR = 0x222200;
const int GREEN_COLOR      = 0x00ff00;      const int DIM_GREEN_COLOR  = 0x002200;
const int PURPLE_COLOR     = 0x8000ff;      const int DIM_PURPLE_COLOR = 0x100022;
const int WHITE_COLOR      = 0xffffff;      const int DIM_WHITE_COLOR  = 0x222222;
const int RECORDING_COLOR  = 0xff0000;

int   SelectedTrack;
int   SelectedTrackColor;

int   ButtonPressedTime;
bool  IsButtonHeld;

float LastSubdivisionTime;
int   LastFrameTime;

int   Tempo;
float TempoDelay;
int   SequenceLength;
int   Subdivision;

bool  Pause;
bool  IsRecording;

bool  IsSettingsOpen;

int   CurrentOctave;
int   ScaleBitMask;
int   RootNote;
int   CurrentScale;
int   NumNotesInScale;

int   HeldNote;
int   HeldNoteNumber;
float HeldNoteXLocation;
float HeldNoteYLocation;

int   LastTouchIndex;
int   LastTouchIndexStart;





//=================================================================================================
// Initialize block & scale notes
//=================================================================================================

//sets initial values------------------------------------------------
void initialise(){

	setLocalConfigActiveState (10, true, true);
	
	Subdivision         = 0;
	SequenceLength      = 64;
	Tempo               = 120;
	TempoDelay          = (60000 / Tempo) / 8;
	LastSubdivisionTime = getMillisecondCounter();
	LastFrameTime       = getMillisecondCounter();
	IsButtonHeld        = false;
	Pause               = true;
	CurrentOctave       = 3;
	SelectedTrack       = 0;
	
	initialiseScale();
}

//generates scale notes in heap--------------------------------------
void initialiseScale(){
	if      (CurrentScale == 0)   ScaleBitMask = 0xab5;  // major
	else if (CurrentScale == 1)   ScaleBitMask = 0x5ad;  // minor
	else if (CurrentScale == 2)   ScaleBitMask = 0x9ad;  // harmonic minor
	else if (CurrentScale == 3)   ScaleBitMask = 0x4a5;  // pentatonic neutral
	else if (CurrentScale == 4)   ScaleBitMask = 0x295;  // pentatonic major
	else if (CurrentScale == 5)   ScaleBitMask = 0x4a9;  // pentatomic minor
	else if (CurrentScale == 6)   ScaleBitMask = 0x4e9;  // blues
	else if (CurrentScale == 7)   ScaleBitMask = 0x6ad;  // dorian
	else if (CurrentScale == 8)   ScaleBitMask = 0x5ab;  // phrygian
	else if (CurrentScale == 9)   ScaleBitMask = 0xad5;  // lydian
	else if (CurrentScale == 10)  ScaleBitMask = 0x6b5;  // mixolydian
	else if (CurrentScale == 11)  ScaleBitMask = 0x56b;  // locrian
	else if (CurrentScale == 12)  ScaleBitMask = 0x555;  // whole tone
	else if (CurrentScale == 13)  ScaleBitMask = 0xb6d;  // arabic (A)
	else if (CurrentScale == 14)  ScaleBitMask = 0x575;  // arabic (B)
	else if (CurrentScale == 15)  ScaleBitMask = 0x8d1;  // japanese
	else if (CurrentScale == 16)  ScaleBitMask = 0x8b1;  // ryukyu
	else if (CurrentScale == 17)  ScaleBitMask = 0x57b;  // 8-tone spanish
	else                          ScaleBitMask = 0xfff;  // chromatic
	
	int n = ScaleBitMask;
	n -= ((n >> 1) & 0x5555);
	n =  (((n >> 2) & 0x3333) + (n & 0x3333));
	n =  (((n >> 4) + n) & 0x0f0f);
	n += (n >> 8);
	NumNotesInScale = n & 0x3f;
	
	int mask = 1;
	int noteIndex = 0;
	int noteNumber = 12 + RootNote;
	int numNotesInSevenCurrentOctaves = NumNotesInScale * 7;
	for(int i = 0; noteIndex < numNotesInSevenCurrentOctaves + 1; ++i){
		if(ScaleBitMask & mask){
			setHeapByte(noteIndex, noteNumber);
			noteIndex++;
		}
		if(mask == 2048)
			mask = 1;
		else
			mask <<= 1;
		noteNumber++;
	}
}





//=================================================================================================
// MAIN LOOP - draws frames & triggers sequencers
//=================================================================================================

//draws settings page when active------------------------------------
void drawGlobalSettingsPage(){
    if(IsSettingsOpen){
        Pause = true;
        blendRect(0xf0000000, 0,  0, 15, 15);
        int offset = int(map(float(CurrentScale), 0.0, 18.0, 0.0, 12.0));
        fillRect(WHITE_COLOR, offset, 14, 3, 1);
        
        int noteIndex = 0;
        int shiftKey = 0;
        int rootNote = RootNote;
        int transposedScaleBits = transposeScaleBitMask();
	    for(int mask = 1; mask <= 2048; mask <<= 1){
	        
	        if(mask == 32){
	            noteIndex++;
	            rootNote++;
	        }
	        
	        if(noteIndex % 2)
			    shiftKey = 0;
		    else
		        shiftKey = 2;
	        
		    if(transposedScaleBits & mask)
		        if(noteIndex == rootNote)
		            fillRect(PURPLE_COLOR, 1 + noteIndex, 9 + shiftKey, 1, 2);
		        else
			        fillRect(WHITE_COLOR, 1 + noteIndex, 9 + shiftKey, 1, 2);
		    else
		        fillRect(DIM_WHITE_COLOR, 1 + noteIndex, 9 + shiftKey, 1, 2);
		        
		    noteIndex++;
	    }
	    
	    if((Tempo / 100) > 0)
	        drawNumber(Tempo, 0xffffffff, 0, 1);
	    else
	        drawNumber(Tempo, 0xffffffff, 3, 1);
    }
}

//draws tracks-------------------------------------------------------
void drawTracks(){
	fillRect(DIM_PURPLE_COLOR, 0,  0, 3,  1);
	fillRect(DIM_PINK_COLOR,   3,  0, 3,  1);
	fillRect(DIM_ORANGE_COLOR, 6,  0, 3,  1);
	fillRect(DIM_YELLOW_COLOR, 9,  0, 3,  1);
	fillRect(DIM_GREEN_COLOR,  12, 0, 3,  1);
	
	if(IsRecording)
	    SelectedTrackColor = RECORDING_COLOR;
	else if(SelectedTrack == 0)
		SelectedTrackColor = PURPLE_COLOR;
	else if(SelectedTrack == 1)
		SelectedTrackColor = PINK_COLOR;
	else if(SelectedTrack == 2)
		SelectedTrackColor =  ORANGE_COLOR;
	else if(SelectedTrack == 3)
		SelectedTrackColor =  YELLOW_COLOR;
	else if(SelectedTrack == 4)
		SelectedTrackColor =  GREEN_COLOR;
	
	fillRect(SelectedTrackColor, (SelectedTrack * 3), 0, 3,  1);
	fillRect(SelectedTrackColor, 0, 1, 15, 1);
}

//draws frame, gets called 25 times per second-----------------------
void drawFrame(){
	clearDisplay();
	
	blendGradientRect(0xC0001880, 0xC0001880, 0xC0007033, 0xC0007033, 0, 2, 15, 13);
	
	fadePressureMap();
	fadePressureMap();
	drawPressureMap();
	
	fillRect(0x000905, (-10 + (CurrentOctave * 2)), 14, 10, 1);
	fillRect(0x000905, (5 + (CurrentOctave * 2))  , 14, 10, 1);
		
	drawTracks();
	drawGlobalSettingsPage();
	
	if(Pause == false){
		fillRect(0xffffff, Subdivision / 8, 1, 1, 1);
		if(HeldNote != 0 && HeldNoteXLocation > 0.0 && HeldNoteXLocation < 1.97)
			addPressurePoint (SelectedTrackColor, HeldNoteXLocation, HeldNoteYLocation, 10.0);
	}
}

//updates current Subdivision, calls drawFrame & triggerSequence-----
void repaint(){
	if(isConnectedToHost()){
	    HandleButtonHeld();
		drawFrame();
		
		while(true){
			if(LastSubdivisionTime + TempoDelay < getMillisecondCounter() && Pause != true){
				LastSubdivisionTime += TempoDelay;
				//if(Subdivision % 2 == 0)
					//triggerNoteSequence();
				//triggerModSequence();
				Subdivision = (Subdivision + 1) % (SequenceLength * 2);
			}
			if(LastFrameTime + 40 < getMillisecondCounter()){
				LastFrameTime = getMillisecondCounter();
				break;
			}
		}
	}
	else
	    clearDisplay();
}





//=================================================================================================
// Handle button events functions
//=================================================================================================

//starts button pressed timer----------------------------------------
void handleButtonDown(int index){
	ButtonPressedTime = getMillisecondCounter();
    IsButtonHeld = true;
}

//checks if button was held for a short time or long time------------
void HandleButtonHeld(){
    if(IsButtonHeld){
        if(getMillisecondCounter() > ButtonPressedTime + SHORT_DELAY){
		    IsRecording = true;
        }
	    if(getMillisecondCounter() > ButtonPressedTime + LONG_DELAY){
	        IsRecording = false;
		    IsSettingsOpen = true;
	    }
    }
}

//determines action if button was not held but clicked --------------
void handleButtonUp(int index){
    IsButtonHeld = false;
    
	if(getMillisecondCounter() < ButtonPressedTime + SHORT_DELAY){
		if(IsSettingsOpen){
            IsSettingsOpen = false;
		}
		else if(Pause == true){
			Pause = false;
			LastSubdivisionTime = getMillisecondCounter();
			Subdivision = 0;
		}
		else if(Pause == false){
			Pause = true;
			IsRecording = false;
			noteOff(0.0);
		}
	}
}





//=================================================================================================
// Dispatch touch events functions to correct page
//=================================================================================================

//determine touches action-------------------------------------------
void touchStart(int index, float x, float y, float z, float vz){
	if(IsSettingsOpen)
	    settingsPageTouchStart(index, x, y, z, vz);
	else
	    mainPageTouchStart(index, x, y, z, vz);
}

//send out note CC, pitchbend, and pressure data---------------------
void touchMove(int index, float x, float y, float z, float vz){
	if(IsSettingsOpen)
	    settingsPageTouchMove(index, x, y, z, vz);
	else
	    mainPageTouchMove(index, x, y, z, vz);
}

//send note off for notes--------------------------------------------
void touchEnd(int index, float x, float y, float z, float vz){
	if(IsSettingsOpen)
	    settingsPageTouchEnd(index, x, y, z, vz);
	else
	    mainPageTouchEnd(index, x, y, z, vz);
}





//=================================================================================================
// Handle touch events for main page
//=================================================================================================

//handle main page touch start events--------------------------------
void mainPageTouchStart(int index, float x, float y, float z, float vz){
    
	//determine last touch index
	if(getMillisecondCounter() > LastTouchIndexStart){
		LastTouchIndexStart = getMillisecondCounter();
		LastTouchIndex = index;
	}
	
	//determine touch action
	if(index <= 5){
		if(y <= 0.15 && index == 1)
			SelectedTrack = mapTouchToRange(x, 7.0, 170.0, 0.0, 4.0);
		else if(y > 0.15 && y < 1.93)
			noteOn(index, x, vz);
		else if(y >= 1.93 && index == 1)
			CurrentOctave = mapTouchToRange(x, 7.0, 170.0, 0.0, 5.0);
	}
}

//handle main page touch move events---------------------------------
void mainPageTouchMove(int index, float x, float y, float z, float vz){
    if(index <= 5 && y > 0.15 && y < 1.93){	    //limit roli block to 5 touch events and checks if touch is a held note
		addPressurePoint (SelectedTrackColor, x, y, z * 20);
		noteControlChange(index, x, y, z, vz);
	}
}

//handle main page touch end events----------------------------------
void mainPageTouchEnd(int index, float x, float y, float z, float vz){
    if(index == LastTouchIndex)
		noteOff(vz);
}





//=================================================================================================
// Handle touch events for settings page
//=================================================================================================

//handle settings page touch start events----------------------------
void settingsPageTouchStart(int index, float x, float y, float z, float vz){
    if(y < 1.0 && index == 1){
        
        if(x < 1.0 && Tempo > 20)
		    Tempo -= 1;
	    else if(x > 1.0 && Tempo < 199)
		    Tempo += 1;
    }
    else if(y >= 1.1 && y < 1.93 && index == 1){
	    int tempRootNote = mapTouchToRange(x, 7.0, 170.0, 0.0, 11.0);
	    
	    if(tempRootNote >= 5){
	        tempRootNote--;
	        
	        if(y < 1.45 && tempRootNote % 2 == 0)
		    RootNote = tempRootNote;
		    else if(y > 1.45 && tempRootNote % 2 == 1)
		        RootNote = tempRootNote;
	    }
	    else{
	    
	        if(y < 1.45 && tempRootNote % 2 == 1)
		        RootNote = tempRootNote;
		    else if(y > 1.45 && tempRootNote % 2 == 0)
		        RootNote = tempRootNote;
	    }
		
		initialiseScale();
    }
    else if(y >= 1.93 && index == 1){
		CurrentScale = mapTouchToRange(x, 7.0, 170.0, 0.0, 17.0);
		initialiseScale();
    }
}

//handle settings page touch move events-----------------------------
void settingsPageTouchMove(int index, float x, float y, float z, float vz){
    if(y < 1.0 && index == 1){
        
        if(x < 1.0 && Tempo > 20)
		    Tempo -= 1;
	    else if(x > 1.0 && Tempo < 199)
		    Tempo += 1;
    }
    else if(y >= 1.1 && y < 1.93 && index == 1){
	    int tempRootNote = mapTouchToRange(x, 7.0, 170.0, 0.0, 11.0);
	    
	    if(tempRootNote >= 5){
	        tempRootNote--;
	        
	        if(y < 1.45 && tempRootNote % 2 == 0)
		    RootNote = tempRootNote;
		    else if(y > 1.45 && tempRootNote % 2 == 1)
		        RootNote = tempRootNote;
	    }
	    else{
	    
	        if(y < 1.45 && tempRootNote % 2 == 1)
		        RootNote = tempRootNote;
		    else if(y > 1.45 && tempRootNote % 2 == 0)
		        RootNote = tempRootNote;
	    }
		
		initialiseScale();
    }
    else if(y >= 1.93 && index == 1){
		CurrentScale = mapTouchToRange(x, 7.0, 170.0, 0.0, 17.0);
		initialiseScale();
    }
    else if(y >= 1.93 && index == 1){
		CurrentScale = mapTouchToRange(x, 7.0, 170.0, 0.0, 17.0);
		initialiseScale();
    }
}

//handle settings page touch end events------------------------------
void settingsPageTouchEnd(int index, float x, float y, float z, float vz){
    TempoDelay = (60000 / Tempo) / 8;
}





//=================================================================================================
// Generate midi event functions
//=================================================================================================

//send note on midi message------------------------------------------
void noteOn(int index, float x, float vz){
	
	//start new note
	int note = getNote(x);
	sendNoteOn(Channel - 1, note, getVelocity(vz));
	
	//stop held note
	noteOff(vz);
	
	//save held note
	HeldNote       = note;
	HeldNoteNumber = getNoteNumber(x);
}

//send note off midi message-----------------------------------------
void noteOff(float vz){
    if(HeldNote != 0){
	    int velocity = getVelocity(vz);
	    sendNoteOff(Channel - 1, HeldNote, velocity);
	    HeldNote = 0;
    }
}

//send note midi CC messages-----------------------------------------
void noteControlChange(int index, float x, float y, float z, float vz){
	
	//when x axis drifts to the next note over, end current note & start new note;
	if(index == LastTouchIndex && getNoteDeviation(x) > 9)
		noteOn(index, x, vz);
	
	//send y axis mod value
	int modValue = clamp(0, 127, mapTouchToRange(y, 20.0, 175.0, 0.0, 127.0));
	modValue = 127 - modValue;   
	sendCC((Channel - 1), 1, modValue);
}





//=================================================================================================
// Utility functions
//=================================================================================================

//re-map range to scaled up intiger----------------------------------
int mapTouchToRange(float v, float inMin, float inMax, float outMin, float outMax){
	return int(map(v * 100, inMin, inMax, outMin, outMax));
}

int getOffsetSubdivision(){
	return ((Subdivision + 1) / 2) % SequenceLength;
}

int getNoteDeviation(float x){
    int noteRange            = (NumNotesInScale * 2 >= 13) ? 13 : (NumNotesInScale * 2);
    int scaledHeldNoteNumber = (HeldNoteNumber * 10) + 5;
	int persicionNoteNumber  = int(((CurrentOctave * NumNotesInScale) + map(x * 100, -7.0, 193.0, 0.0, float(noteRange))) * 10);
    return int(abs(persicionNoteNumber - scaledHeldNoteNumber));
}

int getNote(float x){
	return getHeapByte(getNoteNumber(x));
}

int getNoteNumber(float x){
	int noteRange = (NumNotesInScale * 2 >= 13) ? 13 : (NumNotesInScale * 2);
	return (CurrentOctave * NumNotesInScale) + mapTouchToRange(x, -7.0, 193.0, 0.0, float(noteRange));
}

int getVelocity(float vz){
	return clamp (1, 127, int (vz * 127.0));
}

int transposeScaleBitMask(){
    int scaleBitMask = ScaleBitMask;
    int rootNote = RootNote;
    
    return ((scaleBitMask << rootNote) | (scaleBitMask >> (12 - rootNote)) & 0x0FFF);
}
