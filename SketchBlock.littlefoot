
// --------------------- HEAP LAYOUT ---------------------
//
// current keyboard scale notes:    0 - 96
// current track's keyboard mode:   97 - 103
// track colors:                    104 - 131
// dim track colors:                132 - 159
//
// -------------------------------------------------------





#heapsize: 3500
const int SHORT_DELAY = 1000;
const int LONG_DELAY  = 2000;

const int WARMER_PAD_COLOR        = 0x44FFFF00;     const int COOLER_PAD_COLOR        = 0x4400FFFF;
const int DIM_WARMER_PAD_COLOR    = 0x22FFFF00;     const int DIM_COOLER_PAD_COLOR    = 0x2200FFFF;
const int MEDIUM_WARMER_PAD_COLOR = 0x88FFFF00;     const int MEDIUM_COOLER_PAD_COLOR = 0x8800FFFF;
const int BRIGHT_WARMER_PAD_COLOR = 0xFFFFFF00;     const int BRIGHT_COOLER_PAD_COLOR = 0xFF00FFFF;
const int WHITE_COLOR             = 0xffffff;       const int DIM_WHITE_COLOR         = 0x222222;
const int PURPLE_COLOR            = 0x8800ff;

const int KEYBOARD = 1;
const int PADS = 2;

int   SelectedTrack;

int   ButtonPressedTime;
bool  IsButtonHeld;

float LastSubdivisionTime;
int   LastFrameTime;

int   Tempo;
float TempoDelay;
int   SequenceLength;
int   Subdivision;

bool  Pause;
bool  IsRecording;

bool  IsSettingsOpen;

int   CurrentOctave;
int   ScaleBitMask;
int   RootNote;
int   CurrentScale;
int   NumNotesInScale;

int   HeldNote;
int   HeldNoteNumber;

int   LastTouchIndex;
int   LastTouchIndexStart;





//=================================================================================================
// Initialize block & scale notes
//=================================================================================================

//sets initial values------------------------------------------------
void initialise(){

	setLocalConfigActiveState (10, true, true);
	
	Subdivision         = 0;
	SequenceLength      = 64;
	Tempo               = 120;
	TempoDelay          = (60000 / Tempo) / 8;
	LastSubdivisionTime = getMillisecondCounter();
	LastFrameTime       = getMillisecondCounter();
	IsButtonHeld        = false;
	Pause               = true;
	CurrentOctave       = 3;
	SelectedTrack       = 0;
	HeldNote            = -1;
    HeldNoteNumber      = -1;

    initialiseTracks();
	initialiseScale();
	
	setTrackColor(0, 0x8800ff); //PURPLE_COLOR
	setTrackColor(1, 0xff0044); //TEST2_COLOR
	setTrackColor(2, 0xff8800); //ORANGE_COLOR
	setTrackColor(3, 0x88ff00); //YELLOW_COLOR
	setTrackColor(4, 0x00ff00); //GREEN_COLOR
	setTrackColor(5, 0x00ff88); //AUQA_COLOR
	setTrackColor(6, 0x0000ff); //BLUE_COLOR
	
	setDimTrackColor(0, 0x110022); //DIM_PURPLE_COLOR
	setDimTrackColor(1, 0x220011); //DIM_TEST2_COLOR
    setDimTrackColor(2, 0x221100); //DIM_ORANGE_COLOR
    setDimTrackColor(3, 0x112200); //DIM_YELLOW_COLOR
	setDimTrackColor(4, 0x002200); //DIM_GREEN_COLOR
	setDimTrackColor(5, 0x002211); //DIM_AUQA_COLOR
	setDimTrackColor(6, 0x000022); //DIM_BLUE_COLOR
}

//Initialize Tracks--------------------------------------------------
void initialiseTracks(){
    for (int i = 97; i < 104; i++){
        setHeapByte(i, 1);
    }
}

//generates scale notes in heap--------------------------------------
void initialiseScale(){
	if      (CurrentScale == 0)   ScaleBitMask = 0xab5;  // major
	else if (CurrentScale == 1)   ScaleBitMask = 0x5ad;  // minor
	else if (CurrentScale == 2)   ScaleBitMask = 0x9ad;  // harmonic minor
	else if (CurrentScale == 3)   ScaleBitMask = 0x4a5;  // pentatonic neutral
	else if (CurrentScale == 4)   ScaleBitMask = 0x295;  // pentatonic major
	else if (CurrentScale == 5)   ScaleBitMask = 0x4a9;  // pentatomic minor
	else if (CurrentScale == 6)   ScaleBitMask = 0x4e9;  // blues
	else if (CurrentScale == 7)   ScaleBitMask = 0x6ad;  // dorian
	else if (CurrentScale == 8)   ScaleBitMask = 0x5ab;  // phrygian
	else if (CurrentScale == 9)   ScaleBitMask = 0xad5;  // lydian
	else if (CurrentScale == 10)  ScaleBitMask = 0x6b5;  // mixolydian
	else if (CurrentScale == 11)  ScaleBitMask = 0x56b;  // locrian
	else if (CurrentScale == 12)  ScaleBitMask = 0x555;  // whole tone
	else if (CurrentScale == 13)  ScaleBitMask = 0xb6d;  // arabic (A)
	else if (CurrentScale == 14)  ScaleBitMask = 0x575;  // arabic (B)
	else if (CurrentScale == 15)  ScaleBitMask = 0x8d1;  // japanese
	else if (CurrentScale == 16)  ScaleBitMask = 0x8b1;  // ryukyu
	else if (CurrentScale == 17)  ScaleBitMask = 0x57b;  // 8-tone spanish
	else                          ScaleBitMask = 0xfff;  // chromatic
	
	int n = ScaleBitMask;
	n -= ((n >> 1) & 0x5555);
	n =  (((n >> 2) & 0x3333) + (n & 0x3333));
	n =  (((n >> 4) + n) & 0x0f0f);
	n += (n >> 8);
	NumNotesInScale = n & 0x3f;
	
	int mask = 1;
	int noteIndex = 0;
	int noteNumber = 12 + RootNote;
	int numNotesInSevenCurrentOctaves = NumNotesInScale * 8;
	for(int i = 0; noteIndex < numNotesInSevenCurrentOctaves + 1; ++i){
		if(ScaleBitMask & mask){
			setHeapByte(noteIndex, noteNumber);
			noteIndex++;
		}
		if(mask == 2048)
			mask = 1;
		else
			mask <<= 1;
		noteNumber++;
	}
}





//=================================================================================================
// MAIN LOOP - draws frames & triggers sequencers
//=================================================================================================

//draws settings page when active------------------------------------
void drawGlobalSettingsPage(){
    if(IsSettingsOpen){
        blendRect(0xf0000000, 0,  0, 15, 15);
        int offset = int(map(float(CurrentScale), 0.0, 18.0, 0.0, 12.0));
        fillRect(WHITE_COLOR, offset, 14, 3, 1);
        
        int noteIndex = 0;
        int shiftKey = 0;
        int rootNote = RootNote;
        int transposedScaleBits = transposeScaleBitMask();
	    for(int mask = 1; mask <= 2048; mask <<= 1){
	        
	        if(mask == 32){
	            noteIndex++;
	            rootNote++;
	        }
	        
	        if(noteIndex % 2)
			    shiftKey = 0;
		    else
		        shiftKey = 2;
	        
		    if(transposedScaleBits & mask)
		        if(noteIndex == rootNote)
		            fillRect(PURPLE_COLOR, 1 + noteIndex, 9 + shiftKey, 1, 2);
		        else
			        fillRect(WHITE_COLOR, 1 + noteIndex, 9 + shiftKey, 1, 2);
		    else
		        fillRect(DIM_WHITE_COLOR, 1 + noteIndex, 9 + shiftKey, 1, 2);
		        
		    noteIndex++;
	    }
	    
	    if((Tempo / 100) > 0)
	        drawNumber(Tempo, 0xffffffff, 0, 2);
	    else
	        drawNumber(Tempo, 0xffffffff, 3, 2);
    }
}

//draws tracks-------------------------------------------------------
void drawTracks(){
    for (int i = 0; i < 7; i++){
        if(i < SelectedTrack)
            fillRect(getDimTrackColor(i), i * 2, 0, 2, 1);
        else if (i == SelectedTrack)
            fillRect(getTrackColor(i), i * 2, 0, 3, 1);
        else if (i > SelectedTrack)
            fillRect(getDimTrackColor(i), (i * 2) + 1, 0, 2, 1);
    }
    
 	fillRect(getTrackColor(SelectedTrack), 0, 1, 15, 1);
	
	if (getSelectedTrackCurrentPage() == PADS)
	    drawPads();
	else
	    drawKeyboard();
	    
	if(Pause == false){
		fillRect(0xffffff, Subdivision / 8, 1, 1, 1);
	}
}

void drawKeyboard(){
    blendGradientRect(0x44001880, 0x44001880, 0x66007033, 0x66007033, 0, 2, 15, 12);   	
    
// 	int padNumber = (CurrentOctave * NumNotesInScale);
// 	for (int row = 0; row < 4; row++ ) {
//         for (int column = 0; column < 7; column++){
//             blendRect(DIM_WARMER_PAD_COLOR, (column * 2) + 1, (row * 3) + 3, 1, 1);
//             padNumber++;
//         }
//     }
	
    drawPressureMap();
	drawOctaveSelector();
}

void drawPads(){
    blendGradientRect(0x44001880, 0x44001880, 0x44007033, 0x44007033, 0, 2, 15, 12);
    
    int padNumber = (CurrentOctave * NumNotesInScale);
    for (int row = 0; row < 4; row++ ) {
        for (int column = 0; column < 5; column++){
            
            int padTopColor;
            int padBottomColor;
            if (HeldNoteNumber == padNumber) {
                padTopColor = padNumber % 2 == 0 ? BRIGHT_COOLER_PAD_COLOR : MEDIUM_WARMER_PAD_COLOR;
                padBottomColor = padNumber % 2 == 0 ? MEDIUM_COOLER_PAD_COLOR : BRIGHT_WARMER_PAD_COLOR;
            }
            else {
                padTopColor = padNumber % 2 == 0 ? COOLER_PAD_COLOR : DIM_WARMER_PAD_COLOR;
                padBottomColor = padNumber % 2 == 0 ? DIM_COOLER_PAD_COLOR : WARMER_PAD_COLOR;
            }
            
            blendGradientRect(padTopColor, padTopColor, padBottomColor, padBottomColor, column * 3, (row * 3) + 2, 3, 3);            
            padNumber++;
        }
    }
    
    drawOctaveSelector();
}

void drawOctaveSelector(){
    blendRect(0x66007033, 0, 14, 15, 1);
    blendRect(0xDD000000, (-10 + (CurrentOctave * 2)), 14, 10, 1);
	blendRect(0xDD000000, (5 + (CurrentOctave * 2))  , 14, 10, 1);
}

//draws frame, gets called 25 times per second-----------------------
void drawFrame(){
	clearDisplay();
    fadePressureMap();
	fadePressureMap();
		
	drawTracks();
	drawGlobalSettingsPage();
}

//main loop | updates current Subdivision, calls drawFrame & triggerSequence-----
void repaint(){
	if(isConnectedToHost()){
	    HandleButtonHeld();
		drawFrame();
		
		bool breakForFrame = false;
		while(!breakForFrame){
			if(LastSubdivisionTime + TempoDelay < getMillisecondCounter() && Pause != true){
				LastSubdivisionTime += TempoDelay;
				//if(Subdivision % 2 == 0)
					//triggerNoteSequence();
				//triggerModSequence();
				Subdivision = (Subdivision + 1) % (SequenceLength * 2);
				
			}
			if(LastFrameTime + 40 < getMillisecondCounter()){
				LastFrameTime = getMillisecondCounter();
				breakForFrame = true;
			}
		}
	}
	else
	    clearDisplay();
}





//=================================================================================================
// Handle button events functions
//=================================================================================================

//starts button pressed timer----------------------------------------
void handleButtonDown(int index){
	ButtonPressedTime = getMillisecondCounter();
    IsButtonHeld = true;
}

//checks if button was held for a short time or long time------------
void HandleButtonHeld(){
    if(IsButtonHeld){
        if(getMillisecondCounter() > ButtonPressedTime + SHORT_DELAY){
		    IsRecording = true;
        }
	    if(getMillisecondCounter() > ButtonPressedTime + LONG_DELAY){
	        IsRecording = false;
		    IsSettingsOpen = true;
	    }
    }
}

//determines action if button was not held but clicked --------------
void handleButtonUp(int index){
    IsButtonHeld = false;
    
	if(getMillisecondCounter() < ButtonPressedTime + SHORT_DELAY){
		if(IsSettingsOpen){
            IsSettingsOpen = false;
		}
		else if (getSelectedTrackCurrentPage() == KEYBOARD){
			setSelectedTrackCurrentPage(2);
		}
		else if (getSelectedTrackCurrentPage() == PADS){
			setSelectedTrackCurrentPage(1);
		}
	}
}





//=================================================================================================
// Dispatch touch events functions to correct page
//=================================================================================================

//determine touches action-------------------------------------------
void touchStart(int index, float x, float y, float z, float vz){
	if(IsSettingsOpen)
	    settingsPageTouch(index, x, y, z, vz);
	else
	    mainPageTouchStart(index, x, y, z, vz);
}

//send out note CC, pitchbend, and pressure data---------------------
void touchMove(int index, float x, float y, float z, float vz){
	if(IsSettingsOpen)
	    settingsPageTouch(index, x, y, z, vz);
	else
	    mainPageTouchMove(index, x, y, z, vz);
}

//send note off for notes--------------------------------------------
void touchEnd(int index, float x, float y, float z, float vz){
	if(IsSettingsOpen)
	    settingsPageTouchEnd(index, x, y, z, vz);
	else
	    mainPageTouchEnd(index, x, y, z, vz);
}





//=================================================================================================
// Handle touch events for main page
//=================================================================================================

//handle main page touch start events--------------------------------
void mainPageTouchStart(int index, float x, float y, float z, float vz){
    
	//determine last touch index
	if(getMillisecondCounter() > LastTouchIndexStart){
		LastTouchIndexStart = getMillisecondCounter();
		LastTouchIndex = index;
	}
	
	//determine touch action
	if(index <= 5){
		if(y <= 0.15 && index == 1)
			SelectedTrack = mapTouchToRange(x, 7.0, 170.0, 0.0, 6.0);
		else if(y > 0.15 && y < 1.93)
			if (getSelectedTrackCurrentPage() == PADS)
			    padNoteOn(x, y, getVelocityForZAxis(vz), SelectedTrack);
			else
			    keyboardNoteOn(x, getVelocityForYAxis(y), SelectedTrack);
		else if(y >= 1.93 && index == 1)
			CurrentOctave = mapTouchToRange(x, 7.0, 170.0, 0.0, 5.0);
	}
}

//handle main page touch move events---------------------------------
void mainPageTouchMove(int index, float x, float y, float z, float vz){
    if(index <= 5 && y > 0.15 && y < 1.93){	    //limit roli block to 5 touch events and checks if touch is a held note
		addPressurePoint (getTrackColor(SelectedTrack), x, y, z * 20);
		if (getSelectedTrackCurrentPage() == KEYBOARD)
		    keyboardNoteChange(index, x, getVelocityForYAxis(y), SelectedTrack);
	}
}

//handle main page touch end events----------------------------------
void mainPageTouchEnd(int index, float x, float y, float z, float vz){
    if(index == LastTouchIndex)
		noteOff(getVelocityForZAxis(vz), SelectedTrack);
}





//=================================================================================================
// Handle touch events for settings page
//=================================================================================================

//handle settings page touch start events----------------------------
void settingsPageTouch(int index, float x, float y, float z, float vz){
    if(y < 1.0 && index == 1){
        
        if(x < 1.0 && Tempo > 20)
		    Tempo -= 1;
	    else if(x > 1.0 && Tempo < 199)
		    Tempo += 1;
    }
    else if(y >= 1.1 && y < 1.93 && index == 1){
	    int tempRootNote = mapTouchToRange(x, 7.0, 170.0, 0.0, 11.0);
	    
	    if(tempRootNote >= 5){
	        tempRootNote--;
	        
	        if(y < 1.45 && tempRootNote % 2 == 0)
		    RootNote = tempRootNote;
		    else if(y > 1.45 && tempRootNote % 2 == 1)
		        RootNote = tempRootNote;
	    }
	    else{
	    
	        if(y < 1.45 && tempRootNote % 2 == 1)
		        RootNote = tempRootNote;
		    else if(y > 1.45 && tempRootNote % 2 == 0)
		        RootNote = tempRootNote;
	    }
		
		initialiseScale();
    }
    else if(y >= 1.93 && index == 1){
		CurrentScale = mapTouchToRange(x, 7.0, 170.0, 0.0, 17.0);
		initialiseScale();
    }
}

//handle settings page touch end events------------------------------
void settingsPageTouchEnd(int index, float x, float y, float z, float vz){
    TempoDelay = (60000 / Tempo) / 8;
}





//=================================================================================================
// Generate midi event functions
//=================================================================================================

//send pad note on midi message------------------------------------------
void padNoteOn(float x, float y, int velocity, int channel){
	
    //start new note
	int note = getPadNote(x, y);
	sendNoteOn(channel, note, velocity);
	
	//stop held note
	noteOff(velocity, channel);
	
	//save new held note
	HeldNote = note;
	HeldNoteNumber = getPadNoteNumber(x, y);
}

//send keyboard note on midi message------------------------------------------
void keyboardNoteOn(float x, int velocity, int channel){
	
	//start new note
	int note = getKeyboardNote(x);
	sendNoteOn(channel, note, velocity);
	
	//stop held note
	noteOff(velocity, channel);
	
	//save new held note
	HeldNote = note;
	HeldNoteNumber = getKeyboardNoteNumber(x);
}

//send keyboard note midi CC messages--------------------------------
void keyboardNoteChange(int index, float x, int velocity, int channel){
	
	//when x axis drifts to the next note over, end current note & start new note;
	if(index == LastTouchIndex && getKeyboardNoteDeviation(x) > 9)
		keyboardNoteOn(x, velocity, channel);
}

//send note off midi message-----------------------------------------
void noteOff(int velocity, int channel){
    if (HeldNote != -1){
        sendNoteOff(channel, HeldNote, velocity);
        HeldNote = -1;
        HeldNoteNumber = -1;
    }
}





//=================================================================================================
// Utility functions
//=================================================================================================

//re-map range to scaled up intiger----------------------------------
int mapTouchToRange(float v, float inMin, float inMax, float outMin, float outMax){
	return int(map(v * 100, inMin, inMax, outMin, outMax));
}

int getOffsetSubdivision(){
	return ((Subdivision + 1) / 2) % SequenceLength;
}

int getKeyboardNoteDeviation(float x){
    int noteRange = (NumNotesInScale * 2 >= 13) ? 13 : (NumNotesInScale * 2);
    int scaledHeldNoteNumber = (HeldNoteNumber * 10) + 5;
	int persicionNoteNumber = int(((CurrentOctave * NumNotesInScale) + map(x * 100, -7.0, 193.0, 0.0, float(noteRange))) * 10);
    return int(abs(persicionNoteNumber - scaledHeldNoteNumber));
}

int getPadNote(float x, float y){
	return getHeapByte(getPadNoteNumber(x, y));
}

int getPadNoteNumber(float x, float y){   
    int column = mapTouchToRange(x, -7.0, 172.0, 0.0, 4.0);
    int row = mapTouchToRange(y, 20.0, 153.0, 0.0, 3.0);
	return (CurrentOctave * NumNotesInScale) + ((row * 5) + column); 
}

int getKeyboardNote(float x){
	return getHeapByte(getKeyboardNoteNumber(x));
}

int getKeyboardNoteNumber(float x){
	int noteRange = (NumNotesInScale * 2 >= 13) ? 13 : (NumNotesInScale * 2);
	return (CurrentOctave * NumNotesInScale) + mapTouchToRange(x, -7.0, 193.0, 0.0, float(noteRange));
}

int getVelocityForZAxis(float vz){
	return clamp (1, 127, mapTouchToRange(vz, 0.0, 100.0, 1.0, 127.0));
}

int getVelocityForYAxis(float y){
    return clamp (1, 127, mapTouchToRange(y, 21.0, 178.0, 1.0, 127.0));
}

int transposeScaleBitMask(){
    int scaleBitMask = ScaleBitMask;
    int rootNote = RootNote;
    
    return ((scaleBitMask << rootNote) | (scaleBitMask >> (12 - rootNote)) & 0x0FFF);
}

int getSelectedTrackCurrentPage(){
    return getHeapByte(SelectedTrack + 97);
}

void setSelectedTrackCurrentPage(int page){
    setHeapByte(SelectedTrack + 97, page);
}

void setTrackColor(int track, int color){
    setHeapInt((track * 4) + 104, color);
}

void setDimTrackColor(int track, int color){
    setHeapInt((track * 4) + 132, color);
}

int getTrackColor(int track){
    return getHeapInt((track * 4) + 104);
}

int getDimTrackColor(int track){
    return getHeapInt((track * 4) + 132);
}
