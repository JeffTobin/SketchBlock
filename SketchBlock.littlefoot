
// --------------------- HEAP LAYOUT ---------------------
//
// current keyboard scale notes:    0 - 96
// track colors:                    97 - 124
// dim track colors:                125 - 152
//
// -------------------------------------------------------





#heapsize: 2500
const int SETTINGS_DELAY = 100;
const int SHORT_DELAY    = 500;
const int LONG_DELAY     = 1000;
const int ONE_MINUTE     = 60000;

const int NOTE_SUBDIVISION  = 4;
const int SEQUENCER_PERCISION_SUBDIVISION  = 2;

const int WARMER_PAD_COLOR        = 0x44FFFF00;     const int COOLER_PAD_COLOR        = 0x4400FFFF;
const int DIM_WARMER_PAD_COLOR    = 0x22FFFF00;     const int DIM_COOLER_PAD_COLOR    = 0x2200FFFF;
const int MEDIUM_WARMER_PAD_COLOR = 0x88FFFF00;     const int MEDIUM_COOLER_PAD_COLOR = 0x8800FFFF;
const int BRIGHT_WARMER_PAD_COLOR = 0xFFFFFF00;     const int BRIGHT_COOLER_PAD_COLOR = 0xFF00FFFF;

const int BLACK_COLOR     = 0x000000;
const int WHITE_COLOR     = 0xffffff;
const int DIM_WHITE_COLOR = 0x222222;
const int PURPLE_COLOR    = 0x8800ff;
const int RECORDING_COLOR = 0xff0000;

const int KEYBOARD = 0;
const int PADS = 1;

int   settingsMovmentTimer;

int   ButtonPressedTime;
bool  IsButtonHeld;

float LastSubdivisionTime;
int   LastFrameTime;

int   Tempo;
float TempoDelay;
int   SequenceLength;
int   Subdivision;

bool  Pause;
bool  IsRecording;

int   SelectedPageType;
int   SelectedSettingsPage;

bool  IsSettingsOpen;

int   CurrentHalfOctave;
int   ScaleBitMask;
int   RootNote;
int   CurrentScale;
int   NumNotesInScale;

int   HeldNote;
int   HeldNoteNumber;

int   LastTouchIndex;
int   LastTouchIndexStart;

int   MidiChannel;
bool  MPE;





//=================================================================================================
// Initialize block & scale notes
//=================================================================================================

//sets initial values------------------------------------------------
void initialise(){
	setLocalConfigActiveState (10, true, true);
	
	Subdivision          = 0;
	SequenceLength       = 128;
	Tempo                = 120;
	TempoDelay           = ((ONE_MINUTE / Tempo) / NOTE_SUBDIVISION) / SEQUENCER_PERCISION_SUBDIVISION;
	LastSubdivisionTime  = getMillisecondCounter();
	LastFrameTime        = getMillisecondCounter();
	settingsMovmentTimer = getMillisecondCounter();
	IsButtonHeld         = false;
	Pause                = true;
	CurrentHalfOctave    = 7;
	HeldNote             = -1;
    HeldNoteNumber       = -1;
    SelectedSettingsPage = 0;
    SelectedPageType     = 0;
    MidiChannel          = 1;
    MPE                  = false;

	initialiseScale();
	
	SetSettingsPageActiveColor(0, 0x8800ff); //PURPLE_COLOR
	SetSettingsPageActiveColor(1, 0xff0044); //TEST2_COLOR
	SetSettingsPageActiveColor(2, 0xff8800); //ORANGE_COLOR
	SetSettingsPageActiveColor(3, 0x88ff00); //YELLOW_COLOR
	SetSettingsPageActiveColor(4, 0x00ff00); //GREEN_COLOR
	SetSettingsPageActiveColor(5, 0x00ff88); //AUQA_COLOR
	SetSettingsPageActiveColor(6, 0x0000ff); //BLUE_COLOR
	
	SetSettingsPageDimColor(0, 0x110022); //DIM_PURPLE_COLOR
	SetSettingsPageDimColor(1, 0x220011); //DIM_TEST2_COLOR
    SetSettingsPageDimColor(2, 0x221100); //DIM_ORANGE_COLOR
    SetSettingsPageDimColor(3, 0x112200); //DIM_YELLOW_COLOR
	SetSettingsPageDimColor(4, 0x002200); //DIM_GREEN_COLOR
	SetSettingsPageDimColor(5, 0x002211); //DIM_AUQA_COLOR
	SetSettingsPageDimColor(6, 0x000022); //DIM_BLUE_COLOR
}

//generates scale notes in heap--------------------------------------
void initialiseScale(){
	if      (CurrentScale == 0)   ScaleBitMask = 0xab5;  // major
	else if (CurrentScale == 1)   ScaleBitMask = 0x5ad;  // minor
	else if (CurrentScale == 2)   ScaleBitMask = 0x9ad;  // harmonic minor
	else if (CurrentScale == 3)   ScaleBitMask = 0x4a5;  // pentatonic neutral
	else if (CurrentScale == 4)   ScaleBitMask = 0x295;  // pentatonic major
	else if (CurrentScale == 5)   ScaleBitMask = 0x4a9;  // pentatomic minor
	else if (CurrentScale == 6)   ScaleBitMask = 0x4e9;  // blues
	else if (CurrentScale == 7)   ScaleBitMask = 0x6ad;  // dorian
	else if (CurrentScale == 8)   ScaleBitMask = 0x5ab;  // phrygian
	else if (CurrentScale == 9)   ScaleBitMask = 0xad5;  // lydian
	else if (CurrentScale == 10)  ScaleBitMask = 0x6b5;  // mixolydian
	else if (CurrentScale == 11)  ScaleBitMask = 0x56b;  // locrian
	else if (CurrentScale == 12)  ScaleBitMask = 0x555;  // whole tone
	else if (CurrentScale == 13)  ScaleBitMask = 0xb6d;  // arabic (A)
	else if (CurrentScale == 14)  ScaleBitMask = 0x575;  // arabic (B)
	else if (CurrentScale == 15)  ScaleBitMask = 0x8d1;  // japanese
	else if (CurrentScale == 16)  ScaleBitMask = 0x8b1;  // ryukyu
	else if (CurrentScale == 17)  ScaleBitMask = 0x57b;  // 8-tone spanish
	else                          ScaleBitMask = 0xfff;  // chromatic
	
	int n = ScaleBitMask;
	n -= ((n >> 1) & 0x5555);
	n =  (((n >> 2) & 0x3333) + (n & 0x3333));
	n =  (((n >> 4) + n) & 0x0f0f);
	n += (n >> 8);
	NumNotesInScale = n & 0x3f;
	
	int mask = 1;
	int noteIndex = 0;
	int noteNumber = 12 + RootNote;
	int numNotesInSevenCurrentOctaves = NumNotesInScale * 8;
	for(int i = 0; noteIndex < numNotesInSevenCurrentOctaves + 1; ++i){
		if(ScaleBitMask & mask){
			setHeapByte(noteIndex, noteNumber);
			noteIndex++;
		}
		if(mask == 2048)
			mask = 1;
		else
			mask <<= 1;
		noteNumber++;
	}
}





//=================================================================================================
// MAIN LOOP - draws frames & triggers sequencers
//=================================================================================================

//draws settings page when active------------------------------------
void drawGlobalSettingsPages(){
    if(IsSettingsOpen){
        int blendLevel = SelectedPageType == KEYBOARD ? 0xf0000000 : 0xfA000000;
        blendRect(blendLevel, 0,  0, 15, 15);
        
        drawSettingsPageTabs();
        
        if(SelectedSettingsPage == 0){
            DrawSettingsPageOne();
        }
        else if(SelectedSettingsPage == 1){
            DrawSettingsPageTwo();
        }
        else if(SelectedSettingsPage == 2){
            DrawSettingsPageThree();
        }
        else if(SelectedSettingsPage == 3){
            DrawSettingsPageFour();
        }
        else if(SelectedSettingsPage == 4){
            DrawSettingsPageFive();
        }
        else if(SelectedSettingsPage == 5){
            DrawSettingsPageSix();
        }
        else if(SelectedSettingsPage == 6){
            DrawSettingsPageSeven();
        }
    }
}

void drawSettingsPageTabs(){
    for (int i = 0; i < 7; i++){
        if(i < SelectedSettingsPage)
            fillRect(GetSettingsPageDimColor(i), i * 2, 0, 2, 1);
        else if (i == SelectedSettingsPage)
            fillRect(GetSettingsPageActiveColor(i), i * 2, 0, 3, 1);
        else if (i > SelectedSettingsPage)
            fillRect(GetSettingsPageDimColor(i), (i * 2) + 1, 0, 2, 1);
    }
    
 	fillRect(GetSettingsPageActiveColor(SelectedSettingsPage), 0, 1, 15, 1);
}

void DrawSettingsPageOne(){
    int color1 = SelectedPageType == KEYBOARD ? GetSettingsPageActiveColor(SelectedSettingsPage) : DIM_WHITE_COLOR;
    fillRect(color1, 1, 3, 6, 5);
    fillRect(BLACK_COLOR, 2, 4, 4, 3);
    blendGradientRect(0x44001880, 0x44001880, 0x66007033, 0x66007033, 2, 4, 4, 3);
    
    int color2 = SelectedPageType == PADS ? GetSettingsPageActiveColor(SelectedSettingsPage) : DIM_WHITE_COLOR;
    fillRect(color2, 8, 3, 6, 5);
    for (int row = 0; row < 3; row++ ) {
        for (int column = 0; column < 4; column++){         
            int padTopColor;
            int padBottomColor;
            
            int padColor = (row + column) % 2 == 0 ? COOLER_PAD_COLOR : DIM_WARMER_PAD_COLOR;
            
            fillRect(padColor, column + 9, row + 4, 1, 1); 
        }
    }
    
    int color3 = SelectedPageType == 2 ? GetSettingsPageActiveColor(SelectedSettingsPage) : DIM_WHITE_COLOR;
    fillRect(color3, 1, 9, 6, 5);
    fillRect(BLACK_COLOR, 2, 10, 4, 3);
    
    int color4 = SelectedPageType == 3 ? GetSettingsPageActiveColor(SelectedSettingsPage) : DIM_WHITE_COLOR;
    fillRect(color4, 8, 9, 6, 5);
    fillRect(BLACK_COLOR, 9, 10, 4, 3);
}

void DrawSettingsPageTwo(){
}

void DrawSettingsPageThree(){
    if(CurrentScale / 9){
        drawNumber(CurrentScale + 1, 0xffffffff, 2, 3);
    }
    else {
        drawNumber(CurrentScale + 1, 0xffffffff, 5, 3);
    }
    DrawBitMap(3, 12, 4, GetSettingsPageActiveColor(SelectedSettingsPage), 0x0BA);
    DrawBitMap(3, 0, 4, GetSettingsPageActiveColor(SelectedSettingsPage), 0x38);  
    
    int noteIndex = 0;
    int shiftKey = 0;
    int rootNote = RootNote;
    int transposedScaleBits = transposeScaleBitMask();
	for(int mask = 1; mask <= 2048; mask <<= 1){	        
	    if(mask == 32){
	        noteIndex++;
	        rootNote++;
	    }
	        
        if(noteIndex % 2){
            shiftKey = 0;
        }
        else{
            shiftKey = 2;
        }
	        
        if(transposedScaleBits & mask){
            if(noteIndex == rootNote){
                fillRect(GetSettingsPageActiveColor(SelectedSettingsPage), 1 + noteIndex, 9 + shiftKey, 1, 2);
            }
            else{
                fillRect(WHITE_COLOR, 1 + noteIndex, 9 + shiftKey, 1, 2);
            }
        }
        else{
            fillRect(DIM_WHITE_COLOR, 1 + noteIndex, 9 + shiftKey, 1, 2);
        }
		        
        noteIndex++;
	}
	
	fillRect(GetSettingsPageActiveColor(SelectedSettingsPage), CurrentHalfOctave, 14, 3, 1);
}

void DrawSettingsPageFour(){
    if(SequenceLength / 100){
        drawNumber(SequenceLength, 0xffffffff, 0, 3);
    }
    else {
        drawNumber(SequenceLength, 0xffffffff, 3, 3);
    }
    DrawBitMap(3, 11, 9, GetSettingsPageActiveColor(SelectedSettingsPage), 0x0BA);
    DrawBitMap(3, 1, 9, GetSettingsPageActiveColor(SelectedSettingsPage), 0x38);
    fillRect(DIM_WHITE_COLOR, 9, 9, 1, 5);
    DrawBitMap(5, 5, 9, WHITE_COLOR, 0x447D04);
}

void DrawSettingsPageFive(){
    if(Tempo / 100){
        drawNumber(Tempo, 0xffffffff, 0, 3);
    }
    else {
        drawNumber(Tempo, 0xffffffff, 3, 3);
    }
    DrawBitMap(3, 11, 9, GetSettingsPageActiveColor(SelectedSettingsPage), 0x0BA);
    DrawBitMap(3, 1, 9, GetSettingsPageActiveColor(SelectedSettingsPage), 0x38);
    DrawBitMap(5, 5, 9, WHITE_COLOR, 0x1FAc444);
	DrawBitMap(5, 5, 9, DIM_WHITE_COLOR, 0x1110);
}

void DrawSettingsPageSix(){
}

void DrawSettingsPageSeven(){
    if(MidiChannel / 10){
        drawNumber(MidiChannel, 0xffffffff, 2, 3);
    }
    else {
        drawNumber(MidiChannel, 0xffffffff, 5, 3);
    }
    DrawBitMap(3, 12, 4, GetSettingsPageActiveColor(SelectedSettingsPage), 0x0BA);
    DrawBitMap(3, 0, 4, GetSettingsPageActiveColor(SelectedSettingsPage), 0x38);
    
    int MPEActive = MPE ? GetSettingsPageActiveColor(SelectedSettingsPage) : DIM_WHITE_COLOR;
    DrawBitMap(5, 0, 9, MPEActive, 0x118D771);
	DrawBitMap(5, 5, 9, MPEActive, 0x0213A4E);
	DrawBitMap(5, 10, 9, MPEActive, 0x1E1385E);
}

//draws tracks-------------------------------------------------------

void drawKeyboard(){
    blendGradientRect(0x44001880, 0x44001880, 0x66007033, 0x66007033, 0, 0, 15, 14);   		
    drawPressureMap();
	drawOctaveSelector();
}

void drawPads(){
    blendGradientRect(0x44001880, 0x44001880, 0x44007033, 0x44007033, 0, 0, 15, 15);
    
    int padNumber = (CurrentHalfOctave * (NumNotesInScale / 2));
    for (int row = 0; row < 5; row++ ) {
        for (int column = 0; column < 5; column++){         
            int padTopColor;
            int padBottomColor;
            
            if (HeldNoteNumber == padNumber) {
                padTopColor = padNumber % 2 == 0 ? BRIGHT_COOLER_PAD_COLOR : MEDIUM_WARMER_PAD_COLOR;
                padBottomColor = padNumber % 2 == 0 ? MEDIUM_COOLER_PAD_COLOR : BRIGHT_WARMER_PAD_COLOR;
            }
            else {
                padTopColor = padNumber % 2 == 0 ? COOLER_PAD_COLOR : DIM_WARMER_PAD_COLOR;
                padBottomColor = padNumber % 2 == 0 ? DIM_COOLER_PAD_COLOR : WARMER_PAD_COLOR;
            }
            
            blendGradientRect(padTopColor, padTopColor, padBottomColor, padBottomColor, column * 3, (row * 3), 3, 3);            
            padNumber++;
        }
    }
}

void drawOctaveSelector(){
    blendRect(0x66007033, 0, 14, 15, 1);
    blendRect(0xDD000000, (-12 + CurrentHalfOctave), 14, 12, 1);
	blendRect(0xDD000000, (3 + CurrentHalfOctave)  , 14, 12, 1);
}

//draws frame, gets called 25 times per second-----------------------
void drawFrame(){
	clearDisplay();
    fadePressureMap();
	fadePressureMap();

	if (SelectedPageType == PADS)
	    drawPads();
	else
	    drawKeyboard();
	  
	if(IsRecording == true){
	    fillRect(RECORDING_COLOR, 0, 0, 15, 1);
	}
	else if(Pause == false){
	    fillRect(PURPLE_COLOR, 0, 0, 15, 1);
	}
	    
	if(Pause == false){
		fillRect(0xffffff, ((Subdivision / SEQUENCER_PERCISION_SUBDIVISION) / NOTE_SUBDIVISION) % 16, 0, 1, 1);
	}
	
	drawGlobalSettingsPages();
}

//main loop | updates current Subdivision, calls drawFrame & triggerSequence-----
void repaint(){
	if(isConnectedToHost()){
		HandleButtonHeld();
		drawFrame();
		
		bool breakForFrame = false;
		while(!breakForFrame){
			if(LastSubdivisionTime + TempoDelay < getMillisecondCounter() && Pause != true){
				LastSubdivisionTime += TempoDelay;
				//if(Subdivision % SEQUENCER_PERCISION_SUBDIVISION == 0)
					//triggerNoteSequence();
				//triggerModSequence();
				Subdivision = (Subdivision + 1) % (SequenceLength * SEQUENCER_PERCISION_SUBDIVISION);
				
			}
			if(LastFrameTime + 40 < getMillisecondCounter()){
				LastFrameTime = getMillisecondCounter();
				breakForFrame = true;
			}
		}
	}
	else {
	    clearDisplay();
	}
}





//=================================================================================================
// Handle button events functions
//=================================================================================================

//starts button pressed timer----------------------------------------
void handleButtonDown(int index){
	ButtonPressedTime = getMillisecondCounter();
    IsButtonHeld = true;
}

//checks if button was held for a short time or long time------------
void HandleButtonHeld(){
    if(IsButtonHeld){
        if(getMillisecondCounter() > ButtonPressedTime + SHORT_DELAY){
		    IsRecording = true;
        }
	    if(getMillisecondCounter() > ButtonPressedTime + LONG_DELAY){
	        IsRecording = false;
	        Pause = true;
		    IsSettingsOpen = true;
	    }
    }
}

//determines action if button was not held but clicked --------------
void handleButtonUp(int index){
    IsButtonHeld = false;
    
	if(getMillisecondCounter() < ButtonPressedTime + SHORT_DELAY){
		if(IsSettingsOpen){
            IsSettingsOpen = false;
		}
		else if(Pause){
		    LastSubdivisionTime = getMillisecondCounter();
 			Subdivision = 0;
		    Pause = false;
		}
		else if(!Pause){
		    Pause = true;
		    IsRecording = false;
		}
	}
}





//=================================================================================================
// Dispatch touch events functions to correct page
//=================================================================================================

//determine touches action-------------------------------------------
void touchStart(int index, float x, float y, float z, float vz){
	if(IsSettingsOpen){
	    settingsPageTouch(index, x, y, z, vz, false);
	    settingsMovmentTimer = getMillisecondCounter();
	}
	else{
	    mainPageTouchStart(index, x, y, z, vz);
	}
}

//send out note CC, pitchbend, and pressure data---------------------
void touchMove(int index, float x, float y, float z, float vz){
	if(IsSettingsOpen){
	    if(getMillisecondCounter() > settingsMovmentTimer + SETTINGS_DELAY){
	        settingsPageTouch(index, x, y, z, vz, true);
	        settingsMovmentTimer = getMillisecondCounter();
	    }
	}
	else{
	    mainPageTouchMove(index, x, y, z, vz);
	}
}

//send note off for notes--------------------------------------------
void touchEnd(int index, float x, float y, float z, float vz){
	if(IsSettingsOpen)
	    settingsPageTouchEnd(index, x, y, z, vz);
	else {
	    mainPageTouchEnd(index, x, y, z, vz);
	}
}





//=================================================================================================
// Handle touch events for main page
//=================================================================================================

//handle main page touch start events--------------------------------
void mainPageTouchStart(int index, float x, float y, float z, float vz){
    
	//determine last touch index
	if(getMillisecondCounter() > LastTouchIndexStart){
		LastTouchIndexStart = getMillisecondCounter();
		LastTouchIndex = index;
	}
	
	//determine touch action
	if(index <= 5){
	    if (SelectedPageType == PADS){
	        padNoteOn(x, y, getVelocityForZAxis(vz), MidiChannel);
	    }
	    else{
		    if(y < 1.93)
			    keyboardNoteOn(x, getVelocityForYAxis(y), MidiChannel);
		    else if(y >= 1.93 && index == 1)
			    CurrentHalfOctave = mapTouchToRange(x, 7.0, 170.0, 0.0, 11.0);
	    }
	}
}

//handle main page touch move events---------------------------------
void mainPageTouchMove(int index, float x, float y, float z, float vz){
     if(index <= 5){	    //limit roli block to 5 touch events and checks if touch is a held note
         if(SelectedPageType == KEYBOARD && y < 1.93){
		    addPressurePoint (PURPLE_COLOR, x, y, z * 20);
		    keyboardNoteChange(index, x, getVelocityForYAxis(y), MidiChannel);
         }
         else if(SelectedPageType == PADS){
            PadNoteChange(index, x, y, getVelocityForYAxis(y), MidiChannel);
         }
	}
}

//handle main page touch end events----------------------------------
void mainPageTouchEnd(int index, float x, float y, float z, float vz){
    if(index == LastTouchIndex)
		noteOff(getVelocityForZAxis(vz), MidiChannel);
}





//=================================================================================================
// Handle touch events for settings page
//=================================================================================================

//handle settings page touch start events----------------------------
void settingsPageTouch(int index, float x, float y, float z, float vz, bool touchHeld){
    if (index == 1) {
        if(y <= 0.15){
			    SelectedSettingsPage = mapTouchToRange(x, 7.0, 170.0, 0.0, 6.0);
        }
        else if(SelectedSettingsPage == 0){
            SettingsPageOneTouch(x, y, touchHeld);
        }
        else if(SelectedSettingsPage == 1){
            SettingsPageTwoTouch(x, y, touchHeld);
        }
        else if(SelectedSettingsPage == 2){
            SettingsPageThreeTouch(x, y, touchHeld);
        }
        else if(SelectedSettingsPage == 3){
            SettingsPageFourTouch(x, y, touchHeld);
        }
        else if(SelectedSettingsPage == 4){
            SettingsPageFiveTouch(x, y, touchHeld);
        }
        else if(SelectedSettingsPage == 5){
            SettingsPageSixTouch(x, y, touchHeld);
        }
        else if(SelectedSettingsPage == 6){
            SettingsPageSevenTouch(x, y, touchHeld);
        }
    }
}

void SettingsPageOneTouch(float x, float y, bool touchHeld){
    int column = mapTouchToRange(x, -7.0, 100.0, 0.0, 1.0);
    int row = mapTouchToRange(y, 15.0, 100.0, 0.0, 1.0);
	SelectedPageType = ((row * 2) + column); 
}

void SettingsPageTwoTouch(float x, float y, bool touchHeld){
}

void SettingsPageThreeTouch(float x, float y, bool touchHeld){
    if(y > 0.15 && y <= 1.1){
		if (x < 0.3 && CurrentScale > 0){
		    CurrentScale -= 1;
		    initialiseScale();
		}
		if (x > 1.7 && CurrentScale < 18){
		    CurrentScale += 1;
		    initialiseScale();
		}
    }
    else if(y >= 1.1 && y < 1.8){
	    int tempRootNote = mapTouchToRange(x, 7.0, 170.0, 0.0, 11.0);
	    
	    if(tempRootNote >= 5){
	        tempRootNote--;
	        
	        if(y < 1.55 && tempRootNote % 2 == 0)
		    RootNote = tempRootNote;
		    else if(y > 1.55 && tempRootNote % 2 == 1)
		        RootNote = tempRootNote;
	    }
	    else{
	    
	        if(y < 1.55 && tempRootNote % 2 == 1)
		        RootNote = tempRootNote;
		    else if(y > 1.55 && tempRootNote % 2 == 0)
		        RootNote = tempRootNote;
	    }
		
		initialiseScale();
    }
    else if(y > 1.8){
        CurrentHalfOctave = mapTouchToRange(x, 7.0, 170.0, 0.0, 11.0);
    }
}

void SettingsPageFourTouch(float x, float y, bool touchHeld){
    if(y > 1.2 && y <= 1.6){
		if (x > 0.1 && x < 0.4 && SequenceLength > 1){
		    SequenceLength -= 1;
		}
		if (x > 1.6 && x < 1.9 && SequenceLength < 128){
		    SequenceLength += 1;
		}
    }
}

void SettingsPageFiveTouch(float x, float y, bool touchHeld){
    if(y > 1.2 && y <= 1.6){
		if (x > 0.1 && x < 0.4 && Tempo > 40){
		    Tempo -= 1;
		}
		if (x > 1.6 && x < 1.9 && Tempo < 199){
		    Tempo += 1;
		}
    }
}

void SettingsPageSixTouch(float x, float y, bool touchHeld){
}

void SettingsPageSevenTouch(float x, float y, bool touchHeld){
    if(y > 0.15 && y <= 1.1){
		if (x < 0.3 && MidiChannel > 1){
		    MidiChannel -= 1;
		    initialiseScale();
		}
		if (x > 1.7 && MidiChannel < 16){
		    MidiChannel += 1;
		    initialiseScale();
		}
    }
    else if(y > 1.1 && !touchHeld){
        MPE = !MPE;
    }
}

//handle settings page touch end events------------------------------
void settingsPageTouchEnd(int index, float x, float y, float z, float vz){
    if(SelectedSettingsPage == 4){
        TempoDelay = ((ONE_MINUTE / Tempo) / NOTE_SUBDIVISION) / SEQUENCER_PERCISION_SUBDIVISION;
    }
}



//=================================================================================================
// Generate midi event functions
//=================================================================================================

//send pad note on midi message------------------------------------------
void padNoteOn(float x, float y, int velocity, int channel){
	
    //start new note
	int note = getPadNote(x, y);
	sendNoteOn(channel, note, velocity);
	
	//stop held note
	noteOff(velocity, channel);
	
	//save new held note
	HeldNote = note;
	HeldNoteNumber = getPadNoteNumber(x, y);
}

void PadNoteChange(int index, float x, float y, int velocity, int channel){
	
	//when x or y axis drifts to the next note over, end current note & start new note;
	if(index == LastTouchIndex && HeldNoteNumber != getPadNoteNumber(x, y)) {
		padNoteOn(x, y, velocity, channel);
	}
}

//send keyboard note on midi message------------------------------------------
void keyboardNoteOn(float x, int velocity, int channel){	
	//start new note
	int note = getKeyboardNote(x);
	sendNoteOn(channel, note, velocity);
	
	//stop held note
	noteOff(velocity, channel);
	
	//save new held note
	HeldNote = note;
	HeldNoteNumber = getKeyboardNoteNumber(x);
}

//send keyboard note midi CC messages--------------------------------
void keyboardNoteChange(int index, float x, int velocity, int channel){
	
	//when x axis drifts to the next note over, end current note & start new note;
	if(index == LastTouchIndex && getKeyboardNoteDeviation(x) > 9)
		keyboardNoteOn(x, velocity, channel);
}

//send note off midi message-----------------------------------------
void noteOff(int velocity, int channel){
    if (HeldNote != -1){
        sendNoteOff(channel, HeldNote, velocity);
        HeldNote = -1;
        HeldNoteNumber = -1;
    }
}





//=================================================================================================
// Utility functions
//=================================================================================================

//re-map range to scaled up intiger----------------------------------
int mapTouchToRange(float v, float inMin, float inMax, float outMin, float outMax){
	return int(map(v * 100, inMin, inMax, outMin, outMax));
}

int getOffsetSubdivision(){
	return ((Subdivision + 1) / SEQUENCER_PERCISION_SUBDIVISION) % SequenceLength;
}

int getKeyboardNoteDeviation(float x){
    int noteRange = (NumNotesInScale * 2 >= 13) ? 13 : (NumNotesInScale * 2);
    int scaledHeldNoteNumber = (HeldNoteNumber * 10) + 5;
	int persicionNoteNumber = int(((CurrentHalfOctave * (NumNotesInScale / 2)) + map(x * 100, -7.0, 193.0, 0.0, float(noteRange))) * 10);
    return int(abs(persicionNoteNumber - scaledHeldNoteNumber));
}

int getPadNote(float x, float y){
	return getHeapByte(getPadNoteNumber(x, y));
}

int getPadNoteNumber(float x, float y){   
    int column = mapTouchToRange(x, -7.0, 172.0, 0.0, 4.0);
    int row = mapTouchToRange(y, 0.0, 165.0, 0.0, 4.0);
	return (CurrentHalfOctave * (NumNotesInScale / 2)) + ((row * 5) + column); 
}

int getKeyboardNote(float x){
	return getHeapByte(getKeyboardNoteNumber(x));
}

int getKeyboardNoteNumber(float x){
	int noteRange = (NumNotesInScale * 2 >= 13) ? 13 : (NumNotesInScale * 2);
	return (CurrentHalfOctave * (NumNotesInScale / 2)) + mapTouchToRange(x, -7.0, 193.0, 0.0, float(noteRange));
}

int getVelocityForZAxis(float vz){
	return clamp (1, 127, mapTouchToRange(vz, 0.0, 100.0, 1.0, 127.0));
}

int getVelocityForYAxis(float y){
    return clamp (1, 127, mapTouchToRange(y, 21.0, 178.0, 1.0, 127.0));
}

int transposeScaleBitMask(){
    int scaleBitMask = ScaleBitMask;
    int rootNote = RootNote;
    
    return ((scaleBitMask << rootNote) | (scaleBitMask >> (12 - rootNote)) & 0x0FFF);
}

void SetSettingsPageActiveColor(int track, int color){
    setHeapInt((track * 4) + 97, color);
}

void SetSettingsPageDimColor(int track, int color){
    setHeapInt((track * 4) + 125, color);
}

int GetSettingsPageActiveColor(int track){
    return getHeapInt((track * 4) + 97);
}

int GetSettingsPageDimColor(int track){
    return getHeapInt((track * 4) + 125);
}

void DrawBitMap(int size, int x, int y, int color, int bitmap){
    int column = 0;
    int row = 0;
    int mask = 1;
    
    for(int count = 0; count < size * size; count++){
        if(bitmap & mask){
            fillRect(color, x + row, y + column, 1, 1);
        }
        
        if(row < size - 1){
            row++;
        }
        else {
            column++;
            row = 0;
        }
        
        mask <<= 1;
    }
}
